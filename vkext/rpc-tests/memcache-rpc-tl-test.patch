diff --git a/common/tl/schemas/memcache.tl b/common/tl/schemas/memcache.tl
index 69ee471dd2..7e92d3b373 100644
--- a/common/tl/schemas/memcache.tl
+++ b/common/tl/schemas/memcache.tl
@@ -100,10 +100,10 @@ memcache.tokenHashMd5 hash:string = memcache.Token;
 // returns all entries. The prefix is removed from keys
 @read memcache.getWildcard prefix:string = Vector %(Map string string);
 @read memcache.getWildcardDict prefix:string = Dictionary string;
-@read memcache.getWildcardDictWithLimit prefix:string limit:int = Dictionary string;  // any negative limit is equal to +inf
+@read memcache.getWildcardDictWithLimit prefix:string limit:int = Dictionary string;  // any negative limit is equal to inf
 // list of keys
 @read memcache.getWildcardList prefix:string = Vector string;
-@read memcache.getWildcardListWithLimit prefix:string limit:int = Vector string;      // any negative limit is equal to +inf
+@read memcache.getWildcardListWithLimit prefix:string limit:int = Vector string;      // any negative limit is equal to inf
 @read memcache.getWildcardWithFlags prefix:string = Dictionary memcache.Value;
 
 // -1 for no expire, time before key is expired, false for no key
@@ -127,3 +127,103 @@ memcache.tokenHashMd5 hash:string = memcache.Token;
 @read @internal memcache.multiExists keys:%(Vector string) = Vector Bool;
 
 @readwrite memcache.compareAndDelete key:string expected_token:memcache.Token = memcache.CompareAndDeleteResult;
+
+// ~~~~~~~~~~~~~~~~~~~~ FOR VKEXT TEST ONLY ~~~~~~~~~~~~~~~~~~~
+
+/////
+//
+// Graph
+//
+/////
+
+---types---
+
+//Vertex types: can be from 0 to 3
+graph.vertex
+    owner_id:  int
+    object_id: int
+    type:      int
+    = graph.Vertex;
+
+//Edge types: can be from 0 to 2
+graph.edge
+    from:   %graph.Vertex
+    to:     %graph.Vertex
+    type:   int
+    = graph.Edge;
+
+graph.pattern
+    vertex_type: int
+    edge_type: int
+    = graph.Pattern;
+
+graph.typeWithFieldsMask {fields_mask: #}
+  int1:fields_mask.0?int
+  int2:fields_mask.1?int
+  str:fields_mask.2?string
+= graph.TypeWithFieldsMask fields_mask;
+
+graph.flat1 {n:#} x:n*[int] = graph.Flat1 n;
+
+graph.flat2 x:(%graph.Flat1 2) = graph.Flat2;
+
+test1 {t1 : Type} {t2 : Type}
+  x : (Either (Maybe (%Vector t1)) (Maybe (%VectorTotal t2)))
+= Test t1 t2;
+
+testGenericFm {t:Type} {n:#}
+  a:n.0?(%Vector t)
+  x:n.1?t
+  y:n.2?(Maybe t)
+= TestGenericFm t n;
+
+---functions---
+
+@readwrite
+test_geneirc_fm n:# x : (%TestGenericFm int n) = TestGenericFm int n;
+
+@readwrite
+graph.getFlat2 = Map int %graph.Flat2;
+@readwrite
+graph.eitherIdentity
+   either: (Either string %graph.Vertex)
+ = Either string (%graph.Vertex);
+@readwrite
+graph.storeTypeWithFieldsMask
+   m: #
+   x: %(graph.TypeWithFieldsMask m)
+= Int;
+@readwrite
+graph.getTypeWithFieldsMask
+   fields_mask: #
+= graph.TypeWithFieldsMask fields_mask;
+@readwrite
+graph.retArray = search.Normalize;
+@readwrite
+graph.retNotFlatArray = search.Restrictions;
+@readwrite
+graph.ftest = Test int %graph.Vertex;
+@readwrite
+graph.retTuple x: int len: int = Tuple int 3;
+@readwrite
+graph.retMaybeInt x: int = Maybe int;
+@readwrite
+graph.retMaybeVectorInt x: int len: int = Maybe (%Vector int);
+
+
+---types---
+
+test.storeMaybeArrayData
+  vector: (Maybe %(Vector string))
+  tuple: (Maybe %(Tuple string 1))
+  dictionary: (Maybe %(Dictionary string))
+  int_key_dictionary: (Maybe %(IntKeyDictionary string))
+  long_key_dictionary: (Maybe %(LongKeyDictionary string))
+= test.StoreMaybeArrayData;
+
+---functions---
+
+@readwrite
+test.storeMaybeArray
+  data: %test.storeMaybeArrayData
+= test.StoreMaybeArrayData;
diff --git a/memcached/memcached-rpc.cpp b/memcached/memcached-rpc.cpp
index f5e599c4ee..d787df4f08 100644
--- a/memcached/memcached-rpc.cpp
+++ b/memcached/memcached-rpc.cpp
@@ -2,6 +2,9 @@
 
 #include "auto/TL/constants/common.h"
 #include "auto/TL/constants/memcache.h"
+#include "auto/TL/cpp-serializers/graph/all_functions.h"
+#include "auto/TL/cpp-serializers/common/all_functions.h"
+#include "auto/TL/cpp-serializers/test/all_functions.h"
 #include "common/buffer-set.h"
 #include "common/precise-time.h"
 #include "common/rpc-error-codes.h"
@@ -826,6 +829,88 @@ TL_DO_FUN_END
 TL_PARSE_FUN(memcached_dump_all_lru_keys_to_log)
 TL_PARSE_FUN_END
 
+/****************** TEST ******************/
+
+TL_AUTOGEN_DO_FUN(graph, getFlat2)
+  ResultType res;
+  res.key = 100;
+  res.value = {101, 43};
+  e->tl_store_result(res);
+TL_AUTOGEN_DO_FUN_END
+
+TL_AUTOGEN_DO_FUN(graph, retArray)
+  ResultType res;
+  res.n = 4;
+  for (int i = 0; i < res.n; ++i) {
+    res.data.emplace_back(vk::tl::search::oneNormalize{100 + i, 1.0 * i, 200 + i});
+  }
+  e->tl_store_result(res);
+TL_AUTOGEN_DO_FUN_END
+
+TL_AUTOGEN_DO_FUN(graph, retNotFlatArray)
+  ResultType res;
+  res.m = 4;
+  for (int i = 0; i < res.m; ++i) {
+    res.data.emplace_back(vk::tl::search::restrictions_arg2_item{i, 100 + i, 200 + i});
+  }
+  e->tl_store_result(res);
+TL_AUTOGEN_DO_FUN_END
+
+TL_AUTOGEN_DO_FUN(graph, eitherIdentity)
+  ResultType res = e->either;
+  e->tl_store_result(res);
+TL_AUTOGEN_DO_FUN_END
+
+TL_AUTOGEN_DO_FUN(graph, storeTypeWithFieldsMask)
+  ResultType res = 0;
+  res += e->x.int1.value_or(0) + e->x.int2.value_or(0) +
+         e->x.str.map_or([](const auto &s) { return s.size(); }, 0);
+  e->tl_store_result(res);
+TL_AUTOGEN_DO_FUN_END
+
+TL_AUTOGEN_DO_FUN(graph, getTypeWithFieldsMask)
+  ResultType res;
+  if (e->fields_mask & 1) {
+    res.int1 = 42;
+  }
+  if (e->fields_mask & (1 << 1)) {
+    res.int2 = 43;
+  }
+  if (e->fields_mask & (1 << 2)) {
+    res.str = "Hello";
+  }
+  e->tl_store_result(res);
+TL_AUTOGEN_DO_FUN_END
+
+TL_AUTOGEN_DO_FUN(graph, retTuple)
+  ResultType res(e->len, e->x);
+  e->tl_store_result(res);
+TL_AUTOGEN_DO_FUN_END
+
+TL_AUTOGEN_DO_FUN(graph, retMaybeInt)
+  ResultType res;
+  if (e->x) {
+    res = e->x;
+  }
+  e->tl_store_result(res);
+TL_AUTOGEN_DO_FUN_END
+
+TL_AUTOGEN_DO_FUN(graph, retMaybeVectorInt)
+  ResultType res;
+  if (e->x) {
+    res.emplace(e->len, e->x);
+  }
+  e->tl_store_result(res);
+TL_AUTOGEN_DO_FUN_END
+
+TL_AUTOGEN_DO_FUN(common, test_geneirc_fm)
+  e->tl_store_result(e->x);
+TL_AUTOGEN_DO_FUN_END
+
+TL_AUTOGEN_DO_FUN(test, storeMaybeArray)
+  e->tl_store_result(e->data);
+TL_AUTOGEN_DO_FUN_END
+
 struct tl_act_extra *memcached_parse_function() {
   unsigned int op = tl_fetch_int();
   if (tl_fetch_error()) {
diff --git a/memcached/memcached.mk b/memcached/memcached.mk
index 35227ac23d..8c53f64134 100644
--- a/memcached/memcached.mk
+++ b/memcached/memcached.mk
@@ -4,8 +4,13 @@ $(foreach file, ${MEMCACHE_PARTS}, \
   $(eval $(call ObjWithFlagsCPP, ${OBJ}/memcached/memcached-with-times-$(file).o, memcached/memcached-$(file).cpp, -DWITH_MODIFICATION_TIME)) \
 )
 
-${EXE}/memcached-with-times: ${MEMCACHE_PARTS:%=${OBJ}/memcached/memcached-with-times-%.o} ${TL_ENGINE_OBJS}
-${EXE}/memcached: ${MEMCACHE_PARTS:%=${OBJ}/memcached/memcached-%.o} ${TL_ENGINE_OBJS}
+MEMCACHE_AUTOGEN_TL_DEPS += ${TL_AUTOGEN_GRAPH_CXX}
+MEMCACHE_AUTOGEN_TL_DEPS += ${TL_AUTOGEN_COMMON_CXX}
+MEMCACHE_AUTOGEN_TL_DEPS += ${TL_AUTOGEN_SEARCH_CXX}
+MEMCACHE_AUTOGEN_TL_DEPS += ${TL_AUTOGEN_TEST_CXX}
+
+${EXE}/memcached-with-times: ${MEMCACHE_PARTS:%=${OBJ}/memcached/memcached-with-times-%.o} ${TL_ENGINE_OBJS} ${MEMCACHE_AUTOGEN_TL_DEPS}
+${EXE}/memcached: ${MEMCACHE_PARTS:%=${OBJ}/memcached/memcached-%.o} ${TL_ENGINE_OBJS} ${MEMCACHE_AUTOGEN_TL_DEPS}
 
 ENGINES += memcached
 C_EXE_LIST += memcached memcached-with-times
