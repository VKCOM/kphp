<?php

define('PHP_INT_MIN', -9223372036854775808);
define('PHP_INT_SIZE', 8);
define('PHP_EOL', "\n");

require_once __DIR__ . '/kphp_internal.txt';
require_once __DIR__ . '/kphp_toggles.txt';
require_once __DIR__ . '/kphp_tracing.txt';
require_once __DIR__ . '/uberh3.txt';
require_once __DIR__ . '/spl.txt';
require_once __DIR__ . '/ffi.txt';
require_once __DIR__ . '/pdo/PDO.php';
require_once __DIR__ . '/pdo/PDOStatement.php';

/** @var mixed $_SERVER */
global $_SERVER;
/** @var mixed $_GET */
global $_GET;
/** @var mixed $_POST */
global $_POST;
/** @var mixed $_FILES */
global $_FILES;
/** @var mixed $_COOKIE */
global $_COOKIE;
/** @var mixed $_REQUEST */
global $_REQUEST;
/** @var mixed $_ENV */
global $_ENV;
/** @var mixed $argc */
global $argc;
/** @var mixed $argv */
global $argv;

function boolval ($v ::: any) ::: bool;
function intval ($v ::: mixed) ::: int;
function floatval ($v ::: mixed) ::: float;
function strval ($v ::: mixed) ::: string;

/** @kphp-extern-func-info interruptible */
function exit($code = 0) ::: void;
/** @kphp-extern-func-info interruptible */
function die($code = 0) ::: void;

function ob_clean() ::: void;
function ob_end_clean() ::: bool;
function ob_get_clean() ::: string | false;
function ob_get_contents() ::: string;
function ob_start ($x ::: string = "") ::: void;
function ob_flush () ::: void;
function ob_end_flush () ::: bool;
function ob_get_flush () ::: string | false;
function ob_get_length () ::: int | false;
function ob_get_level () ::: int;

function print_r ($v ::: any, $buffered ::: bool = false) ::: string;
function var_export ($v ::: any, $buffered ::: bool = false) ::: string;
function print ($v ::: string) ::: int;
function echo ($v ::: string) ::: void;
function dbg_echo ($v ::: string) ::: void;
function var_dump ($v ::: any) ::: void;

function empty ($val ::: any) ::: bool;
function count ($val ::: any) ::: int;
function sizeof ($val ::: any) ::: int;
function gettype ($v ::: any) ::: string;
function is_scalar ($v ::: any) ::: bool;
function is_numeric ($v ::: mixed) ::: bool;
function is_null ($v ::: any) ::: bool;
function is_bool ($v ::: mixed) ::: bool;
function is_int ($v ::: mixed) ::: bool;
function is_integer ($v ::: mixed) ::: bool;
function is_long ($v ::: mixed) ::: bool;
function is_finite ($v ::: float) ::: bool;
function is_infinite ($v ::: float) ::: bool;
function is_nan ($v ::: float) ::: bool;
function is_float ($v ::: mixed) ::: bool;
function is_double ($v ::: mixed) ::: bool;
function is_real ($v ::: mixed) ::: bool;
function is_string ($v ::: mixed) ::: bool;
function is_array ($v ::: any) ::: bool;
function is_object ($v ::: any) ::: bool;
function get_class ($v ::: any) ::: string;
function get_hash_of_class (object $klass) ::: int;

class ComponentQuery {
    private function __construct() ::: \ComponentQuery;
}

/** @kphp-extern-func-info interruptible */
function component_client_send_query($name ::: string, $message ::: string = 'fix_sigsegv') ::: ComponentQuery;
/** @kphp-extern-func-info interruptible */
function component_client_get_result($query ::: ComponentQuery) ::: string;

/** @kphp-extern-func-info interruptible */
function component_server_get_query() ::: string;
/** @kphp-extern-func-info interruptible */
function component_server_send_result($message ::: string) ::: void;

function make_clone ($x ::: any) ::: ^1;
