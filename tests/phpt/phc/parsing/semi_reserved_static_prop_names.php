@ok
<?php

class ExampleProps {
    public static $int = 'int';
    public static $float = 'float';
    public static $double = 'double';
    public static $string = 'string';
    public static $object = 'object';
    public static $void = 'void';
    public static $mixed = 'mixed';
    public static $bool = 'bool';
    public static $tuple = 'tuple';
    public static $shape = 'shape';
    public static $eval = 'eval';
    public static $var_dump = 'var_dump';
    public static $define = 'define';
    public static $defined = 'defined';
    public static $true = 'empty';
    public static $false = 'empty';
    public static $null = 'empty';
    public static $empty = 'empty';
    public static $callable = 'callable';
    public static $class = 'class';
    public static $trait = 'trait';
    public static $extends = 'extends';
    public static $implements = 'implements';
    public static $static = 'static';
    public static $abstract = 'abstract';
    public static $final = 'final';
    public static $public = 'public static';
    public static $protected = 'protected';
    public static $private = 'private';
    public static $const = 'const';
    public static $enddeclare = 'enddeclare';
    public static $endfor = 'endfor';
    public static $endforeach = 'endforeach';
    public static $endif = 'endif';
    public static $endwhile = 'endwhile';
    public static $and = 'and';
    public static $global = 'global';
    public static $goto = 'goto';
    public static $instanceof = 'instanceof';
    public static $insteadof = 'insteadof';
    public static $interface = 'interface';
    public static $namespace = 'namespace';
    public static $new = 'new';
    public static $or = 'or';
    public static $xor = 'xor';
    public static $try = 'try';
    public static $use = 'use';
    public static $var = 'var';
    public static $exit = 'exit';
    public static $list = 'list';
    public static $clone = 'clone';
    public static $include = 'include';
    public static $include_once = 'include_once';
    public static $throw = 'throw';
    public static $array = 'array';
    public static $print = 'print';
    public static $echo = 'echo';
    public static $require = 'require';
    public static $require_once = 'require_once';
    public static $return = 'return';
    public static $else = 'else';
    public static $elseif = 'elseif';
    public static $default = 'default';
    public static $break = 'break';
    public static $continue = 'continue';
    public static $switch = 'switch';
    public static $yield = 'yield';
    public static $function = 'function';
    public static $fn = 'fn';
    public static $if = 'if';
    public static $endswitch = 'endswitch';
    public static $finally = 'finally';
    public static $for = 'for';
    public static $foreach = 'foreach';
    public static $declare = 'declare';
    public static $case = 'case';
    public static $do = 'do';
    public static $while = 'while';
    public static $as = 'as';
    public static $catch = 'catch';
    public static $die = 'die';
    public static $self = 'self';
    public static $parent = 'parent';
    public static $isset = 'isset';
    public static $unset = 'unset';
}

var_dump(ExampleProps::$int);
var_dump(ExampleProps::$float);
var_dump(ExampleProps::$double);
var_dump(ExampleProps::$string);
var_dump(ExampleProps::$object);
var_dump(ExampleProps::$void);
var_dump(ExampleProps::$mixed);
var_dump(ExampleProps::$bool);
var_dump(ExampleProps::$tuple);
var_dump(ExampleProps::$shape);
var_dump(ExampleProps::$eval);
var_dump(ExampleProps::$var_dump);
var_dump(ExampleProps::$define);
var_dump(ExampleProps::$defined);
var_dump(ExampleProps::$true);
var_dump(ExampleProps::$false);
var_dump(ExampleProps::$null);
var_dump(ExampleProps::$empty);
var_dump(ExampleProps::$callable);
var_dump(ExampleProps::$class);
var_dump(ExampleProps::$trait);
var_dump(ExampleProps::$extends);
var_dump(ExampleProps::$implements);
var_dump(ExampleProps::$static);
var_dump(ExampleProps::$abstract);
var_dump(ExampleProps::$final);
var_dump(ExampleProps::$public);
var_dump(ExampleProps::$protected);
var_dump(ExampleProps::$private);
var_dump(ExampleProps::$const);
var_dump(ExampleProps::$enddeclare);
var_dump(ExampleProps::$endfor);
var_dump(ExampleProps::$endforeach);
var_dump(ExampleProps::$endif);
var_dump(ExampleProps::$endwhile);
var_dump(ExampleProps::$and);
var_dump(ExampleProps::$global);
var_dump(ExampleProps::$goto);
var_dump(ExampleProps::$instanceof);
var_dump(ExampleProps::$insteadof);
var_dump(ExampleProps::$interface);
var_dump(ExampleProps::$namespace);
var_dump(ExampleProps::$new);
var_dump(ExampleProps::$or);
var_dump(ExampleProps::$xor);
var_dump(ExampleProps::$try);
var_dump(ExampleProps::$use);
var_dump(ExampleProps::$var);
var_dump(ExampleProps::$exit);
var_dump(ExampleProps::$list);
var_dump(ExampleProps::$clone);
var_dump(ExampleProps::$include);
var_dump(ExampleProps::$include_once);
var_dump(ExampleProps::$throw);
var_dump(ExampleProps::$array);
var_dump(ExampleProps::$print);
var_dump(ExampleProps::$echo);
var_dump(ExampleProps::$require);
var_dump(ExampleProps::$require_once);
var_dump(ExampleProps::$return);
var_dump(ExampleProps::$else);
var_dump(ExampleProps::$elseif);
var_dump(ExampleProps::$default);
var_dump(ExampleProps::$break);
var_dump(ExampleProps::$continue);
var_dump(ExampleProps::$switch);
var_dump(ExampleProps::$yield);
var_dump(ExampleProps::$function);
var_dump(ExampleProps::$fn);
var_dump(ExampleProps::$if);
var_dump(ExampleProps::$endswitch);
var_dump(ExampleProps::$finally);
var_dump(ExampleProps::$for);
var_dump(ExampleProps::$foreach);
var_dump(ExampleProps::$declare);
var_dump(ExampleProps::$case);
var_dump(ExampleProps::$do);
var_dump(ExampleProps::$while);
var_dump(ExampleProps::$as);
var_dump(ExampleProps::$catch);
var_dump(ExampleProps::$die);
var_dump(ExampleProps::$self);
var_dump(ExampleProps::$parent);
var_dump(ExampleProps::$unset);
var_dump(ExampleProps::$isset);
