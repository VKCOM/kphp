@ok
<?php

class ExampleConsts {
    const int = 'int';
    const float = 'float';
    const double = 'double';
    const string = 'string';
    const object = 'object';
    const void = 'void';
    const mixed = 'mixed';
    const bool = 'bool';
    const tuple = 'tuple';
    const shape = 'shape';
    const eval = 'eval';
    const var_dump = 'var_dump';
    const define = 'define';
    const defined = 'defined';
    const true = 'true';
    const false = 'false';
    const null = 'null';
    const empty = 'empty';
    const callable = 'callable';
    const trait = 'trait';
    const extends = 'extends';
    const implements = 'implements';
    const static = 'static';
    const abstract = 'abstract';
    const final = 'final';
    const public = 'public';
    const protected = 'protected';
    const private = 'private';
    const const = 'const';
    const enddeclare = 'enddeclare';
    const endfor = 'endfor';
    const endforeach = 'endforeach';
    const endif = 'endif';
    const endwhile = 'endwhile';
    const and = 'and';
    const global = 'global';
    const goto = 'goto';
    const instanceof = 'instanceof';
    const insteadof = 'insteadof';
    const interface = 'interface';
    const namespace = 'namespace';
    const new = 'new';
    const or = 'or';
    const xor = 'xor';
    const try = 'try';
    const use = 'use';
    const var = 'var';
    const exit = 'exit';
    const list = 'list';
    const clone = 'clone';
    const include = 'include';
    const include_once = 'include_once';
    const throw = 'throw';
    const array = 'array';
    const print = 'print';
    const echo = 'echo';
    const require = 'require';
    const require_once = 'require_once';
    const return = 'return';
    const else = 'else';
    const elseif = 'elseif';
    const default = 'default';
    const break = 'break';
    const continue = 'continue';
    const switch = 'switch';
    const yield = 'yield';
    const function = 'function';
    const fn = 'fn';
    const if = 'if';
    const endswitch = 'endswitch';
    const finally = 'finally';
    const for = 'for';
    const foreach = 'foreach';
    const declare = 'declare';
    const case = 'case';
    const do = 'do';
    const while = 'while';
    const as = 'as';
    const catch = 'catch';
    const die = 'die';
    const self = 'self';
    const parent = 'parent';
    const isset = 'isset';
    const unset = 'unset';
}

var_dump(ExampleConsts::int);
var_dump(ExampleConsts::float);
var_dump(ExampleConsts::double);
var_dump(ExampleConsts::string);
var_dump(ExampleConsts::object);
var_dump(ExampleConsts::void);
var_dump(ExampleConsts::mixed);
var_dump(ExampleConsts::bool);
var_dump(ExampleConsts::tuple);
var_dump(ExampleConsts::shape);
var_dump(ExampleConsts::eval);
var_dump(ExampleConsts::var_dump);
var_dump(ExampleConsts::define);
var_dump(ExampleConsts::defined);
var_dump(ExampleConsts::true);
var_dump(ExampleConsts::false);
var_dump(ExampleConsts::null);
var_dump(ExampleConsts::empty);
var_dump(ExampleConsts::callable);
var_dump(ExampleConsts::trait);
var_dump(ExampleConsts::extends);
var_dump(ExampleConsts::implements);
var_dump(ExampleConsts::static);
var_dump(ExampleConsts::abstract);
var_dump(ExampleConsts::final);
var_dump(ExampleConsts::public);
var_dump(ExampleConsts::protected);
var_dump(ExampleConsts::private);
var_dump(ExampleConsts::const);
var_dump(ExampleConsts::enddeclare);
var_dump(ExampleConsts::endfor);
var_dump(ExampleConsts::endforeach);
var_dump(ExampleConsts::endif);
var_dump(ExampleConsts::endwhile);
var_dump(ExampleConsts::and);
var_dump(ExampleConsts::global);
var_dump(ExampleConsts::goto);
var_dump(ExampleConsts::instanceof);
var_dump(ExampleConsts::insteadof);
var_dump(ExampleConsts::interface);
var_dump(ExampleConsts::namespace);
var_dump(ExampleConsts::new);
var_dump(ExampleConsts::or);
var_dump(ExampleConsts::xor);
var_dump(ExampleConsts::try);
var_dump(ExampleConsts::use);
var_dump(ExampleConsts::var);
var_dump(ExampleConsts::exit);
var_dump(ExampleConsts::list);
var_dump(ExampleConsts::clone);
var_dump(ExampleConsts::include);
var_dump(ExampleConsts::include_once);
var_dump(ExampleConsts::throw);
var_dump(ExampleConsts::array);
var_dump(ExampleConsts::print);
var_dump(ExampleConsts::echo);
var_dump(ExampleConsts::require);
var_dump(ExampleConsts::require_once);
var_dump(ExampleConsts::return);
var_dump(ExampleConsts::else);
var_dump(ExampleConsts::elseif);
var_dump(ExampleConsts::default);
var_dump(ExampleConsts::break);
var_dump(ExampleConsts::continue);
var_dump(ExampleConsts::switch);
var_dump(ExampleConsts::yield);
var_dump(ExampleConsts::function);
var_dump(ExampleConsts::fn);
var_dump(ExampleConsts::if);
var_dump(ExampleConsts::endswitch);
var_dump(ExampleConsts::finally);
var_dump(ExampleConsts::for);
var_dump(ExampleConsts::foreach);
var_dump(ExampleConsts::declare);
var_dump(ExampleConsts::case);
var_dump(ExampleConsts::do);
var_dump(ExampleConsts::while);
var_dump(ExampleConsts::as);
var_dump(ExampleConsts::catch);
var_dump(ExampleConsts::die);
var_dump(ExampleConsts::self);
var_dump(ExampleConsts::parent);
var_dump(ExampleConsts::isset);
var_dump(ExampleConsts::unset);
