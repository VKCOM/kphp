<?php

/**
 * AUTOGENERATED, DO NOT EDIT! If you want to modify it, check tl schema.
 *
 * This autogenerated code represents tl class for typed RPC API.
 */

namespace VK\TL\_common\Types;

use VK\TL;

/**
 * @kphp-tl-class
 */
class rpcReqResultExtra {

  /** Field mask for $binlog_pos field */
  const BIT_BINLOG_POS_0 = (1 << 0);

  /** Field mask for $binlog_time field */
  const BIT_BINLOG_TIME_1 = (1 << 1);

  /** Field mask for $engine_pid field */
  const BIT_ENGINE_PID_2 = (1 << 2);

  /** Field mask for $request_size field */
  const BIT_REQUEST_SIZE_3 = (1 << 3);

  /** Field mask for $response_size field */
  const BIT_RESPONSE_SIZE_3 = (1 << 3);

  /** Field mask for $failed_subqueries field */
  const BIT_FAILED_SUBQUERIES_4 = (1 << 4);

  /** Field mask for $compression_version field */
  const BIT_COMPRESSION_VERSION_5 = (1 << 5);

  /** Field mask for $stats field */
  const BIT_STATS_6 = (1 << 6);

  /** Field mask for $epoch_number field */
  const BIT_EPOCH_NUMBER_27 = (1 << 27);

  /** Field mask for $view_number field */
  const BIT_VIEW_NUMBER_27 = (1 << 27);

  /** @var int|null */
  public $binlog_pos = null;

  /** @var int|null */
  public $binlog_time = null;

  /** @var TL\net\Types\net_pid|null */
  public $engine_pid = null;

  /** @var int|null */
  public $request_size = null;

  /** @var int|null */
  public $response_size = null;

  /** @var int|null */
  public $failed_subqueries = null;

  /** @var int|null */
  public $compression_version = null;

  /** @var string[]|null */
  public $stats = null;

  /** @var int|null */
  public $epoch_number = null;

  /** @var int|null */
  public $view_number = null;

  /**
   * @kphp-inline
   */
  public function __construct() {
  }

  /**
   * @return int
   */
  public function calculateFlags() {
    $mask = 0;

    if ($this->binlog_pos !== null) {
      $mask |= self::BIT_BINLOG_POS_0;
    }

    if ($this->binlog_time !== null) {
      $mask |= self::BIT_BINLOG_TIME_1;
    }

    if ($this->engine_pid) {
      $mask |= self::BIT_ENGINE_PID_2;
    }

    if ($this->request_size !== null && $this->response_size !== null) {
      $mask |= (self::BIT_REQUEST_SIZE_3 | self::BIT_RESPONSE_SIZE_3);
    }

    if ($this->failed_subqueries !== null) {
      $mask |= self::BIT_FAILED_SUBQUERIES_4;
    }

    if ($this->compression_version !== null) {
      $mask |= self::BIT_COMPRESSION_VERSION_5;
    }

    if ($this->stats !== null) {
      $mask |= self::BIT_STATS_6;
    }

    if ($this->epoch_number !== null && $this->view_number !== null) {
      $mask |= (self::BIT_EPOCH_NUMBER_27 | self::BIT_VIEW_NUMBER_27);
    }

    return $mask;
  }

}
