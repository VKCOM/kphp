;;; Function specialization rules

;; Using a simple pattern matching in combination with constant folding,
;; replace functions with their specialized forms.
;; The specialized forms have better typing.

(op_func_call {"microtime"})            => (op_func_call {"_microtime_string"})
(op_func_call {"microtime"} (op_false)) => (op_func_call {"_microtime_string"})
(op_func_call {"microtime"} (op_true))  => (op_func_call {"_microtime_float"})

(op_func_call {"hrtime"})            => (op_func_call {"_hrtime_array"})
(op_func_call {"hrtime"} (op_false)) => (op_func_call {"_hrtime_array"})
(op_func_call {"hrtime"} (op_true))  => (op_func_call {"_hrtime_int"})

;;; String conversion optimization rules

;; this produces a simpler code, so "$x" is compiled as (string)$x
(op_string_build x) => (op_conv_string x)

;; ("" . $x) is a less efficient way to perform a string conversion
(op_concat (op_string {""}) x) => (op_conv_string x)
(op_concat x (op_string {""})) => (op_conv_string x)

;; eager string conversion may result in redundant string allocation
;; let concat overloadings do their magic: maybe there is an overloading for
;; a given type that can be appended to the string directly
(op_concat (op_conv_string x) y) => (op_concat x y)
(op_concat x (op_conv_string y)) => (op_concat x y)

;;; Constant folding rules

(op_func_call {"ord"} arg:(op_string))
  where { arg->str_val.size() == 1 }
  => (op_int_const { std::to_string(static_cast<unsigned char>(arg->str_val[0])) })

(op_func_call {"chr"} arg:(op_int_const))
  => (op_string { std::string(1, std::stol(arg->str_val)) })

(op_func_call {"strlen"} arg:(op_string))
  => (op_int_const { std::to_string(arg->str_val.size()) })

(op_func_call {"count"} arg:(op_array ...))
  => (op_int_const { std::to_string(arg->args().size()) })

;;; Substr (and alike) optimization rules

;; conversions can operate on a temporary substring expression,
;; turn conv(substr(...)) into conv(_tmp_substr(...))
(op_conv_bool x)
  if let x2 { to_tmp_string_expr(x) }
  => (op_conv_bool x2)
(op_conv_int x)
  if let x2 { to_tmp_string_expr(x) }
  => (op_conv_int x2)

;; append assignment has overloading that handles tmp substrings
(op_set_dot lhs rhs)
  if let rhs2 { to_tmp_string_expr(rhs) }
  => (op_set_dot lhs rhs2)

;; array indexing has overloading that handles tmp substrings
(op_index arr k)
  if let k2 { to_tmp_string_expr(k) }
  => (op_index arr k2)

;; concat could be a single expression from the PHP point of view,
;; but KPHP would compile it as a sequence with temporary variables
;; and we can't allow tmp_string to outlive its source;
;; this is why we have to use safe version of the tmp_string_expr here
(op_concat x y)
  if let x2 { to_safe_tmp_string_expr(x) }
  => (op_concat x2 y)
(op_concat x y)
  if let y2 { to_safe_tmp_string_expr(y) }
  => (op_concat x y2)

;;; Explode optimization rules

(op_index (op_func_call {"explode"} delim s) k:(op_int_const))
  => (op_func_call {"_explode_nth"} delim s k)

;; explode($delim, $s, 1) doesn't make sense, so we optimize only calls without it
(op_list (op_list_keyval (op_int_const {"0"}) v) (op_func_call {"explode"} delim s))
  => (op_set v (op_func_call {"_explode_1"} delim s))
